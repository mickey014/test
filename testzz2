-- Database Connection --
using System;
using System.Data;
using System.Data.SqlClient;
using System.Windows.Forms;

public static class Database
{
    public static SqlConnection conn;
    public static SqlCommand cmd;
    public static SqlDataReader reader;

    public static void db_connect()
    {
        try
        {
            conn = new SqlConnection(@"Server=DESKTOP-B7PU5R3\SQLEXPRESS;Database=employee;Trusted_Connection=True;");
            if (conn.State == ConnectionState.Closed)
            {
                conn.Open();
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show("Database Connection Error: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
    }
}


-- Dashboard --
using System;
using System.Data;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace EmployeeManagement
{
    public partial class Form1 : Form
    {
        private string id = "";
        private SqlTransaction transaction = null;

        public Form1()
        {
            InitializeComponent();
        }

        private void Clear()
        {
            id = "";
            txtName.Clear();
            txtUsername.Clear();
            txtEmail.Clear();
            txtAge.Clear();
            txtPassword.Clear();
            txtSearch.Clear();
            get_all_user();
        }

        private void get_all_user()
        {
            try
            {
                Database.db_connect();
                dgvUsers.Rows.Clear();

                string query = "SELECT * FROM users;";
                Database.cmd = new SqlCommand(query, Database.conn);
                Database.reader = Database.cmd.ExecuteReader();

                while (Database.reader.Read())
                {
                    dgvUsers.Rows.Add(Database.reader["id"].ToString(),
                                      Database.reader["name"].ToString(),
                                      Database.reader["username"].ToString(),
                                      Database.reader["email"].ToString(),
                                      Database.reader["age"].ToString(),
                                      Database.reader["password"].ToString());
                }

                Database.reader.Close();
                Database.conn.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            get_all_user();
        }

        private void dgvUsers_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                DataGridViewRow selectedRow = dgvUsers.Rows[e.RowIndex];
        
                if (selectedRow.Cells["colId"].Value != null)
                {
                    id = selectedRow.Cells["colId"].Value.ToString();
                    txtName.Text = selectedRow.Cells["colName"].Value.ToString();
                    txtUsername.Text = selectedRow.Cells["colUsername"].Value.ToString();
                    txtEmail.Text = selectedRow.Cells["colEmail"].Value.ToString();
                    txtAge.Text = selectedRow.Cells["colAge"].Value.ToString();
                    txtPassword.Text = selectedRow.Cells["colPassword"].Value.ToString();
                }
            }
        
            if (e.ColumnIndex >= 0)
            {
                string columnName = dgvUsers.Columns[e.ColumnIndex].Name;
                if (columnName == "colEducational")
                {
                    MessageBox.Show("education");
                }
            }
        }

        private void searchBtn_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtSearch.Text))
            {
                get_all_user();
                return;
            }
        
            try
            {
                Database.db_connect();
                dgvUsers.Rows.Clear();
        
                string query = "SELECT * FROM users WHERE id LIKE @id OR username LIKE @username";
                Database.cmd = new SqlCommand(query, Database.conn);
                Database.cmd.Parameters.AddWithValue("@id", txtSearch.Text);
                Database.cmd.Parameters.AddWithValue("@username", "%" + txtSearch.Text + "%");
        
                Database.reader = Database.cmd.ExecuteReader();
        
                while (Database.reader.Read())
                {
                    dgvUsers.Rows.Add(reader["id"].ToString(),
                                      reader["name"].ToString(),
                                      reader["username"].ToString(),
                                      reader["email"].ToString(),
                                      reader["age"].ToString(),
                                      reader["password"].ToString());
                }
        
                Database.reader.Close();
                //Database.cmd.Dispose(); // Dispose the command object
                Database.conn.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }


        private void updateBtn_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(id))
            {
                MessageBox.Show("User ID is invalid.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
        
            if (string.IsNullOrEmpty(txtName.Text) || string.IsNullOrEmpty(txtUsername.Text) ||
                string.IsNullOrEmpty(txtEmail.Text) || string.IsNullOrEmpty(txtAge.Text) ||
                string.IsNullOrEmpty(txtPassword.Text))
            {
                MessageBox.Show("All fields are required!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            else if (!int.TryParse(txtAge.Text, out _))
            {
                MessageBox.Show("Age is invalid!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
        
            try
            {
                Database.db_connect();
                string query = "UPDATE users SET name=@name, username=@username, email=@email, age=@age, password=@password WHERE id=@id";
                Database.cmd = new SqlCommand(query, Database.conn);
                Database.cmd.Parameters.AddWithValue("@name", txtName.Text);
                Database.cmd.Parameters.AddWithValue("@username", txtUsername.Text);
                Database.cmd.Parameters.AddWithValue("@email", txtEmail.Text);
                Database.cmd.Parameters.AddWithValue("@age", txtAge.Text);
                Database.cmd.Parameters.AddWithValue("@password", txtPassword.Text);
                Database.cmd.Parameters.AddWithValue("@id", id);
        
                Database.cmd.ExecuteNonQuery();
                //Database.cmd.Dispose(); // Manually disposing to free resources
        
                MessageBox.Show("User was updated.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                Database.conn.Close();
                Clear();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }


        private void saveBtn_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtName.Text) || string.IsNullOrEmpty(txtUsername.Text) ||
                string.IsNullOrEmpty(txtEmail.Text) || string.IsNullOrEmpty(txtAge.Text) ||
                string.IsNullOrEmpty(txtPassword.Text))
            {
                MessageBox.Show("All fields are required!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            else if (!int.TryParse(txtAge.Text, out _))
            {
                MessageBox.Show("Age is invalid!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            try
            {
                Database.db_connect();
                transaction = Database.conn.BeginTransaction();

                string query = "INSERT INTO users (name, username, email, age, password) VALUES (@name, @username, @email, @age, @password); SELECT SCOPE_IDENTITY();";
                Database.cmd = new SqlCommand(query, Database.conn, transaction);
                Database.cmd.Parameters.AddWithValue("@name", txtName.Text);
                Database.cmd.Parameters.AddWithValue("@username", txtUsername.Text);
                Database.cmd.Parameters.AddWithValue("@email", txtEmail.Text);
                Database.cmd.Parameters.AddWithValue("@age", txtAge.Text);
                Database.cmd.Parameters.AddWithValue("@password", txtPassword.Text);

                Database.cmd.ExecuteNonQuery();
                transaction.Commit();

                MessageBox.Show("User was added.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                Database.conn.Close();
                Clear();
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                MessageBox.Show("Error: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void deleteBtn_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(id))
            {
                MessageBox.Show("User ID is invalid.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            var result = MessageBox.Show("Are you sure you want to delete this user?", "Confirm Deletion", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);

            if (result == DialogResult.No) return;

            try
            {
                Database.db_connect();
                string query = "DELETE FROM users WHERE id=@id";
                Database.cmd = new SqlCommand(query, Database.conn);
                Database.cmd.Parameters.AddWithValue("@id", id);
                Database.cmd.ExecuteNonQuery();
                MessageBox.Show("User was deleted.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                Database.conn.Close();
                Clear();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void logout_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            DialogResult result = MessageBox.Show("Are you sure you want to logout?", "Message", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
        
            if (result == DialogResult.No)
            {
                return;
            }
        
            this.Hide();
            loginForm.Show();
        }

        private void showPass_CheckedChanged(object sender, EventArgs e)
        {
            txtPassword.PasswordChar = showPass.Checked ? '\0' : '*';
        }


    }
}


-- Login --
using System;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace EmployeeManagement
{
    public partial class LoginForm : Form
    {
        public LoginForm()
        {
            InitializeComponent();
        }

        private void signinBtn_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(signinUsername.Text) || string.IsNullOrEmpty(signinPassword.Text))
            {
                MessageBox.Show("All fields are required!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            try
            {
                Database.db_connect();
                string query = "SELECT username, password FROM users WHERE username = @username AND password = @password";
                Database.cmd = new SqlCommand(query, Database.conn);
                Database.cmd.Parameters.AddWithValue("@username", signinUsername.Text);
                Database.cmd.Parameters.AddWithValue("@password", signinPassword.Text);
                Database.reader = Database.cmd.ExecuteReader();

                if (Database.reader.HasRows)
                {
                    MessageBox.Show("Login successful", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    Form1 dashboard = new Form1();
                    dashboard.Show();
                    this.Hide();
                }
                else
                {
                    MessageBox.Show("Invalid username or password", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }

                Database.reader.Close();
                Database.conn.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }
}

-- Register --
using System;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace EmployeeManagement
{
    public partial class RegisterForm : Form
    {
        public RegisterForm()
        {
            InitializeComponent();
        }

        private void signupBtn_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(signupUsername.Text) ||
                string.IsNullOrEmpty(signupPassword.Text) ||
                string.IsNullOrEmpty(signupCPassword.Text))
            {
                MessageBox.Show("All fields are required!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            else if (signupPassword.Text != signupCPassword.Text)
            {
                MessageBox.Show("Passwords do not match. Please try again.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            try
            {
                Database.db_connect();
                string query = "INSERT INTO users (username, password) VALUES (@username, @password)";
                Database.cmd = new SqlCommand(query, Database.conn);
                Database.cmd.Parameters.AddWithValue("@username", signupUsername.Text);
                Database.cmd.Parameters.AddWithValue("@password", signupPassword.Text);
                Database.cmd.ExecuteNonQuery();
                MessageBox.Show("User was added.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                Database.conn.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }
}
